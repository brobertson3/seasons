{"version":3,"sources":["seasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","latitude","month","season","Date","getMonth","className","Spinner","message","defaultProps","App","componentDidMount","window","navigator","geolocation","getCurrentPosition","position","setState","coords","error","errorMessage","renderContent","state","this","React","Component","ReactDOM","render","document","querySelector"],"mappings":"sMAIMA,G,MAAe,CACnBC,OAAQ,CAAEC,KAAM,sBAAuBC,SAAU,OACjDC,OAAQ,CAAEF,KAAM,oBAAqBC,SAAU,eAwBlCE,EAbO,SAAAC,GACpB,IATiBC,EAAUC,EASrBC,GATWF,EASQD,EAAMC,UATJC,GASc,IAAIE,MAAOC,YARxC,GAAKH,EAAQ,EAChBD,EAAW,EAAI,SAAW,SAE1BA,EAAW,EAAI,SAAW,UAIN,EAEFP,EAAaS,GAAhCP,EAFqB,EAErBA,KAAMC,EAFe,EAEfA,SAEd,OACE,yBAAKS,UAAWH,EAAS,mBACvB,uBAAGG,UAAWT,EAAW,4BACzB,4BAAKD,GACL,uBAAGU,UAAWT,EAAW,+BCvBzBU,EAAU,SAAAP,GACd,OACE,yBAAKM,UAAU,oBACb,yBAAKA,UAAU,sBAAsBN,EAAMQ,WAKjDD,EAAQE,aAAe,CACrBD,QAAS,cAGID,QCRTG,E,YACJ,WAAYV,GAAQ,IAAD,8BACjB,4CAAMA,KAURW,kBAAoB,WAClBC,OAAOC,UAAUC,YAAYC,oBAC3B,SAAAC,GAAQ,OAAI,EAAKC,SAAS,CAAEhB,SAAUe,EAASE,OAAOjB,cACtD,SAAAkB,GAAK,OAAI,EAAKF,SAAS,CAAEG,aAAcD,EAAMX,cAd9B,EAkBnBa,cAAgB,WACd,OAAI,EAAKC,MAAMF,eAAiB,EAAKE,MAAMrB,SAClC,uCAAa,EAAKqB,MAAMF,eACrB,EAAKE,MAAMF,cAAgB,EAAKE,MAAMrB,SACzC,kBAAC,EAAD,CAAeA,SAAU,EAAKqB,MAAMrB,WAEpC,kBAAC,EAAD,CAASO,QAAQ,oCArB1B,EAAKc,MAAQ,CACXrB,SAAU,KACVmB,aAAc,IALC,E,sEA6BjB,OAAO,6BAAMG,KAAKF,qB,GA9BJG,IAAMC,WAkCxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,W","file":"static/js/main.1199e763.chunk.js","sourcesContent":["import \"./seasonDisplay.css\";\n\nimport React from \"react\";\n\nconst seasonConfig = {\n  summer: { text: \"Let's hit the beach\", iconName: \"sun\" },\n  winter: { text: \"Burr, it's chilly\", iconName: \"snowflake\" }\n};\n\nconst getSeason = (latitude, month) => {\n  if (month > 2 && month < 9) {\n    return latitude > 0 ? \"summer\" : \"winter\";\n  } else {\n    return latitude > 0 ? \"winter\" : \"summer\";\n  }\n};\n\nconst SeasonDisplay = props => {\n  const season = getSeason(props.latitude, new Date().getMonth());\n  const { text, iconName } = seasonConfig[season];\n\n  return (\n    <div className={season + \" season-display\"}>\n      <i className={iconName + \" icon-left massive icon\"}></i>\n      <h1>{text}</h1>\n      <i className={iconName + \" icon-right massive icon\"}></i>\n    </div>\n  );\n};\n\nexport default SeasonDisplay;\n","import React from \"react\";\n\nconst Spinner = props => {\n  return (\n    <div className=\"ui active dimmer\">\n      <div className=\"ui big text loader\">{props.message}</div>\n    </div>\n  );\n};\n\nSpinner.defaultProps = {\n  message: \"Loading...\"\n};\n\nexport default Spinner;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport SeasonDisplay from \"./seasonDisplay\";\nimport Spinner from \"./Spinner\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      latitude: null,\n      errorMessage: \"\"\n    };\n  }\n  // Equivalent to above because of babel\n  // state = { latitude: null, errorMessage: \"\" };\n\n  componentDidMount = () => {\n    window.navigator.geolocation.getCurrentPosition(\n      position => this.setState({ latitude: position.coords.latitude }),\n      error => this.setState({ errorMessage: error.message })\n    );\n  };\n\n  renderContent = () => {\n    if (this.state.errorMessage && !this.state.latitude) {\n      return <div>Error: {this.state.errorMessage}</div>;\n    } else if (!this.state.errorMessage && this.state.latitude) {\n      return <SeasonDisplay latitude={this.state.latitude} />;\n    } else {\n      return <Spinner message=\"Please accept location request\" />;\n    }\n  };\n\n  render() {\n    return <div>{this.renderContent()}</div>;\n  }\n}\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}